name: CEREBRUM CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_dev.txt

    - name: Run code formatting checks
      run: |
        black --check src/ --diff
        isort --check-only src/ --diff

    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --strict-optional

    - name: Run tests with coverage
      run: |
        coverage run -m pytest src/tests/ -v --tb=short
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_dev.txt

    - name: Run integration tests
      run: |
        pytest src/tests/integration/ -v --tb=short -m "not slow"

    - name: Test model examples
      run: |
        cd src/examples
        python linear_regression_example.py --quick-test
        python neural_network_example.py --quick-test || true  # Allow failure for now

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation builds
      run: |
        cd docs
        make html || echo "Documentation build failed - needs setup"

  paper-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive-xetex

    - name: Set up Node.js for Mermaid
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Mermaid CLI
      run: |
        npm install -g @mermaid-js/mermaid-cli

    - name: Build paper
      run: |
        cd paper
        python assemble_paper.py --output-dir=output --quick-build || echo "Paper build needs components"

  beyond-cerebrum-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_dev.txt

    - name: Test beyond_cerebrum module
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest beyond_cerebrum/src/tests/ -v --tb=short

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run security checks
      run: |
        safety check --json || true
        bandit -r src/ -f json || true

  build-status:
    runs-on: ubuntu-latest
    needs: [test, integration-tests, beyond-cerebrum-tests]
    if: always()
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Core tests passed"
        else
          echo "❌ Core tests failed"
          exit 1
        fi 
import pytest
import os
import sys
import logging
import numpy as np
from pathlib import Path
from typing import Dict, Any
from src.models.base import Case

# Add the src directory to the Python path for proper imports
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Configure test logger
@pytest.fixture(scope="session")
def logger():
    """Return a configured logger for use in tests."""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=logging.DEBUG, format=log_format)
    return logging.getLogger("cerebrum-tests")

# Common model parameters fixtures
@pytest.fixture
def default_model_params() -> Dict[str, Any]:
    """Return default parameters for models."""
    return {
        "learning_rate": 0.01,
        "precision": 1.0,
    }

@pytest.fixture
def default_active_inference_params() -> Dict[str, Any]:
    """Return default parameters for active inference models."""
    return {
        "prior_means": np.zeros(3),
        "prior_precision": np.eye(3),
        "likelihood_precision": np.eye(3),
    }

# Path fixtures
@pytest.fixture(scope="session")
def project_root() -> Path:
    """Return the project root directory as Path object."""
    return Path(__file__).parent.parent.parent

@pytest.fixture(scope="session")
def test_data_dir(project_root) -> Path:
    """Return the test data directory, creating it if it doesn't exist."""
    data_dir = project_root / "tests" / "data"
    data_dir.mkdir(parents=True, exist_ok=True)
    return data_dir

@pytest.fixture(scope="function")
def output_dir(tmp_path) -> str:
    """Return a temporary output directory for test visualizations."""
    output_path = tmp_path / "test_output"
    output_path.mkdir(exist_ok=True)
    return str(output_path)

@pytest.fixture(scope="session")
def linear_test_data():
    """Generates a simple dataset for linear regression tests."""
    from src.utils.data_generator import DataGenerator
    from src.utils.array_utils import validate_regression_data
    
    # Generate test data using the data generator
    X, y = DataGenerator.linear_data(
        n_samples=100, 
        slope=2.5, 
        intercept=1.0, 
        noise_level=0.5,
        random_seed=42
    )
    
    # Validate and return
    X, y = validate_regression_data(X, y)
    return X, y

# Define case definitions as a fixture
@pytest.fixture(scope="session")
def case_definitions():
    """Provides the definitions for all grammatical cases."""
    # This structure mirrors the one in src/visualization/case_visualization.py
    # but is provided as a fixture for testing purposes.
    return {
        Case.NOMINATIVE: {
            "case": "NOM",
            "example": "The NEURAL NETWORK PREDICTS the output values",
            "formula": "ŷ = f(x; θ)",
            "linguistic_meaning": "Agent/Subject",
            "statistical_role": "Predictive model",
            "neural_network_context": "The model as a whole, mapping inputs to outputs."
        },
        Case.ACCUSATIVE: {
            "case": "ACC",
            "example": "The model processes THE INPUT DATA",
            "formula": "x",
            "linguistic_meaning": "Patient/Object",
            "statistical_role": "Input data",
            "neural_network_context": "The data fed into the model for prediction or training."
        },
        Case.GENITIVE: {
            "case": "GEN",
            "example": "The MODEL'S PARAMETERS are optimized",
            "formula": "θ",
            "linguistic_meaning": "Possessive/Source",
            "statistical_role": "Model parameters",
            "neural_network_context": "The weights and biases that define the model's behavior."
        },
        Case.DATIVE: {
            "case": "DAT",
            "example": "The model provides PREDICTIONS TO THE USER",
            "formula": "ŷ",
            "linguistic_meaning": "Recipient/Beneficiary",
            "statistical_role": "Output/Predictions",
            "neural_network_context": "The results generated by the model."
        },
        Case.LOCATIVE: {
            "case": "LOC",
            "example": "The computation happens IN THE HIDDEN LAYERS",
            "formula": "h = g(x; θ_h)",
            "linguistic_meaning": "In/At/Within",
            "statistical_role": "Representational context",
            "neural_network_context": "The internal states or hidden layer activations of the model."
        },
        Case.INSTRUMENTAL: {
            "case": "INS",
            "example": "The model predicts BY MEANS OF its algorithm",
            "formula": "f(·)",
            "linguistic_meaning": "By means of/Using",
            "statistical_role": "Computational method",
            "neural_network_context": "The algorithm or computational graph itself."
        },
        Case.ABLATIVE: {
            "case": "ABL",
            "example": "The error is calculated FROM THE TRUE LABELS",
            "formula": "y",
            "linguistic_meaning": "From/Away from",
            "statistical_role": "Target/Ground truth",
            "neural_network_context": "The true values used for calculating loss or accuracy."
        },
        Case.VOCATIVE: {
            "case": "VOC",
            "example": "O, NEURAL NETWORK, give me a prediction!",
            "formula": "Interface(f(x))",
            "linguistic_meaning": "Direct address/Invocation",
            "statistical_role": "Interactive interface",
            "neural_network_context": "The model exposed as a callable service or API."
        }
    } 